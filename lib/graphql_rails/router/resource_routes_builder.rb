# frozen_string_literal: true

require_relative 'query_route'
require_relative 'mutation_route'

module GraphqlRails
  class Router
    # Generates graphql routes based on resource name and options
    class ResourceRoutesBuilder
      AVAILABLE_ROUTES = %i[show index create update destroy].freeze

      def initialize(name, only: nil, except: [], **options)
        @name = name.to_s

        @options = options
        @autogenerated_action_names = initial_action_names(only, except, AVAILABLE_ROUTES)
      end

      def routes
        @routes ||= initial_routes
      end

      def query(*args, **kwargs)
        routes << build_query(*args, **kwargs)
      end

      def mutation(*args, **kwargs)
        routes << build_mutation(*args, **kwargs)
      end

      private

      attr_reader :autogenerated_action_names, :name, :options

      def initial_routes
        routes = initial_query_routes
        routes << build_mutation(:create, on: :member) if autogenerated_action_names.include?(:create)
        routes << build_mutation(:update, on: :member) if autogenerated_action_names.include?(:update)
        routes << build_mutation(:destroy, on: :member) if autogenerated_action_names.include?(:destroy)
        routes
      end

      def initial_query_routes
        routes = Set.new

        if autogenerated_action_names.include?(:show)
          routes << build_route(QueryRoute, 'show', to: "#{name}#show", prefix: '', on: :member)
        end

        if autogenerated_action_names.include?(:index)
          routes << build_route(QueryRoute, 'index', to: "#{name}#index", prefix: '', on: :collection)
        end

        routes
      end

      def build_mutation(*args, **kwargs)
        build_route(MutationRoute, *args, **kwargs)
      end

      def build_query(*args, **kwargs)
        build_route(QueryRoute, *args, **kwargs)
      end

      # rubocop:disable Metrics/ParameterLists
      def build_route(builder, action, prefix: action, suffix: false, on: :member, **custom_options)
        if suffix == true
          suffix_name = action
          prefix = ''
        end

        action_options = options.merge(custom_options).merge(on: on)
        controller_method_name = action.to_s.underscore
        action_name = [prefix, resource_name(on), suffix_name].map(&:to_s).reject(&:empty?).join('_')
        builder.new(action_name, to: "#{name}##{controller_method_name}", **action_options)
      end
      # rubocop:enable Metrics/ParameterLists

      def initial_action_names(only, except, available)
        alowed_routes = Array(only || available) & available
        only_routes = alowed_routes.map(&:to_sym) - Array(except).map(&:to_sym)
        Set.new(only_routes)
      end

      def resource_name(type)
        type.to_sym == :member ? name.singularize : name
      end
    end
  end
end
